Ext.define("Ext.grid.property.Grid",{extend:"Ext.grid.Panel",alias:"widget.propertygrid",alternateClassName:"Ext.grid.PropertyGrid",uses:["Ext.grid.plugin.CellEditing","Ext.grid.property.Store","Ext.grid.property.HeaderContainer","Ext.XTemplate","Ext.grid.CellEditor","Ext.form.field.Date","Ext.form.field.Text","Ext.form.field.Number","Ext.form.field.ComboBox"],valueField:"value",nameField:"name",inferTypes:true,enableColumnMove:false,columnLines:true,stripeRows:false,trackMouseOver:false,clicksToEdit:1,enableHdMenu:false,gridCls:Ext.baseCSSPrefix+"property-grid",initComponent:function(){var a=this;a.source=a.source||{};a.addCls(a.gridCls);a.plugins=a.plugins||[];a.plugins.push(new Ext.grid.plugin.CellEditing({clicksToEdit:a.clicksToEdit,startEdit:function(b,c){return this.self.prototype.startEdit.call(this,b,a.headerCt.child("#"+a.valueField))}}));a.selModel={selType:"cellmodel",onCellSelect:function(b){if(b.column!=1){b.column=1}return this.self.prototype.onCellSelect.call(this,b)}};a.sourceConfig=Ext.apply({},a.sourceConfig);if(!a.store){a.propStore=a.store=new Ext.grid.property.Store(a,a.source)}a.configure(a.sourceConfig);if(a.sortableColumns){a.store.sort("name","ASC")}a.columns=new Ext.grid.property.HeaderContainer(a,a.store);a.addEvents("beforepropertychange","propertychange");a.callParent();a.getView().walkCells=this.walkCells;a.editors={date:new Ext.grid.CellEditor({field:new Ext.form.field.Date({selectOnFocus:true})}),string:new Ext.grid.CellEditor({field:new Ext.form.field.Text({selectOnFocus:true})}),number:new Ext.grid.CellEditor({field:new Ext.form.field.Number({selectOnFocus:true})}),"boolean":new Ext.grid.CellEditor({field:new Ext.form.field.ComboBox({editable:false,store:[[true,a.headerCt.trueText],[false,a.headerCt.falseText]]})})};a.store.on("update",a.onUpdate,a)},configure:function(b){var g=this,j=g.store,d=0,e=g.store.getCount(),k=g.nameField,l=g.valueField,a,h,c,f;g.configureLegacy(b);if(g.inferTypes){for(;d<e;++d){c=j.getAt(d);a=c.get(k);if(!g.getConfig(a,"type")){h=c.get(l);if(Ext.isDate(h)){f="date"}else{if(Ext.isNumber(h)){f="number"}else{if(Ext.isBoolean(h)){f="boolean"}else{f="string"}}}g.setConfig(a,"type",f)}}}},getConfig:function(e,d,a){var c=this.sourceConfig[e],b;if(c){b=c[d]}return b||a},setConfig:function(e,b,c){var a=this.sourceConfig,d=a[e];if(!d){d=a[e]={__copied:true}}else{if(!d.__copied){d=Ext.apply({__copied:true},d);a[e]=d}}d[b]=c;return c},configureLegacy:function(a){var c=this,e,b,d;c.copyLegacyObject(a,c.customRenderers,"renderer");c.copyLegacyObject(a,c.customEditors,"editor");c.copyLegacyObject(a,c.propertyNames,"displayName");if(c.customRenderers||c.customEditors||c.propertyNames){if(Ext.global.console&&Ext.global.console.warn){Ext.global.console.warn(this.$className,'customRenderers, customEditors & propertyNames have been consolidated into a new config, see "sourceConfig". These configurations will be deprecated.')}}},copyLegacyObject:function(a,e,c){var b,d;for(b in e){if(e.hasOwnProperty(b)){if(!a[b]){a[b]={}}a[b][c]=e[b]}}},onUpdate:function(d,a,c){var f=this,b,e;if(f.rendered&&c==Ext.data.Model.EDIT){b=a.get(f.valueField);e=a.modified.value;if(f.fireEvent("beforepropertychange",f.source,a.getId(),b,e)!==false){if(f.source){f.source[a.getId()]=b}a.commit();f.fireEvent("propertychange",f.source,a.getId(),b,e)}else{a.reject()}}},walkCells:function(g,f,d,c,a,b){if(f=="left"){f="up"}else{if(f=="right"){f="down"}}g=Ext.view.Table.prototype.walkCells.call(this,g,f,d,c,a,b);if(g&&!g.column){g.column=1}return g},getCellEditor:function(a,d){var f=this,g=a.get(f.nameField),h=a.get(f.valueField),c=f.getConfig(g,"editor"),b=f.getConfig(g,"type"),e=f.editors;if(c){if(!(c instanceof Ext.grid.CellEditor)){if(!(c instanceof Ext.form.field.Base)){c=Ext.ComponentManager.create(c,"textfield")}c=f.setConfig(g,"editor",new Ext.grid.CellEditor({field:c}))}}else{if(b){switch(b){case"date":c=e.date;break;case"number":c=e.number;break;case"boolean":c=f.editors["boolean"];break;default:c=e.string}}else{if(Ext.isDate(h)){c=e.date}else{if(Ext.isNumber(h)){c=e.number}else{if(Ext.isBoolean(h)){c=e["boolean"]}else{c=e.string}}}}}c.editorId=g;return c},beforeDestroy:function(){var a=this;a.callParent();a.destroyEditors(a.editors);a.destroyEditors(a.customEditors);delete a.source},destroyEditors:function(b){for(var a in b){if(b.hasOwnProperty(a)){Ext.destroy(b[a])}}},setSource:function(b,c){var a=this;a.source=b;if(c!==undefined){a.sourceConfig=Ext.apply({},c);a.configure(a.sourceConfig)}a.propStore.setSource(b)},getSource:function(){return this.propStore.getSource()},setProperty:function(c,b,a){this.propStore.setValue(c,b,a)},removeProperty:function(a){this.propStore.remove(a)}});