Ext.define("Ext.selection.TreeModel",{extend:"Ext.selection.RowModel",alias:"selection.treemodel",constructor:function(a){this.callParent(arguments);if(this.pruneRemoved){this.pruneRemoved=false;this.pruneRemovedNodes=true}},bindStore:function(a,b){var c=this;c.callParent(arguments);if(c.pruneRemovedNodes){c.view.mon(c.treeStore,{remove:c.onNodeRemove,scope:c})}},onNodeRemove:function(b,c,a){if(!a){this.deselectDeletedRecords([c])}},onKeyRight:function(b,a){this.navExpand(b,a)},navExpand:function(d,b){var c=this.getLastFocused(),a=this.view;if(c){if(c.isExpanded()){this.onKeyDown(d,b)}else{if(c.isExpandable()){if(!a.isTreeView){a=a.lockingPartner}a.expand(c)}}}},onKeyLeft:function(b,a){this.navCollapse(b,a)},navCollapse:function(g,c){var d=this,f=this.getLastFocused(),b=this.view,a;if(f){a=f.parentNode;if(f.isExpanded()){if(!b.isTreeView){b=b.lockingPartner}b.collapse(f)}else{if(a&&!a.isRoot()){if(g.shiftKey){d.selectRange(a,f,g.ctrlKey,"up");d.setLastFocused(a)}else{if(g.ctrlKey){d.setLastFocused(a)}else{d.select(a)}}}}}},onKeySpace:function(b,a){if(b.record.data.checked!=null){this.toggleCheck(b)}else{this.callParent(arguments)}},onKeyEnter:function(b,a){if(b.record.data.checked!=null){this.toggleCheck(b)}else{this.callParent(arguments)}},toggleCheck:function(c){var a=this.view,b=this.getLastSelected();c.stopEvent();if(b){if(!a.isTreeView){a=a.lockingPartner}a.onCheckChange(b)}}});